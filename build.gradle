buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE")
        classpath("org.flywaydb:flyway-gradle-plugin:4.0")
    }
}

plugins {
    id 'com.craigburke.bower-installer' version '2.5.1'
    id 'com.craigburke.karma' version '1.4.3'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.flywaydb.flyway'

//noinspection GroovyUnusedAssignment
sourceCompatibility = 1.8
//noinspection GroovyUnusedAssignment
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

idea {
    module {
        sourceDirs += file('src/main')
        testSourceDirs += file('src/test')
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.security:spring-security-core:4.0.4.RELEASE")
    compile("org.flywaydb:flyway-core:4.0")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.3")
    runtime("org.postgresql:postgresql:9.4-1206-jdbc42")

    testCompile('junit:junit:4.12')
    testCompile('org.hamcrest:hamcrest-all:1.3')
}

jar.archiveName = "ConfLab.jar"

bower {
    installBase = 'src/main/resources/static/lib'

    dependencies {
        'jquery'('2.1.x') {
            source 'dist/*'
        }

        'croppie'('git://github.com/approce/Croppie') {
            source '*.css' >> 'css/'
            source '*.js' >> 'js/'
        }

        'underscore'('1.8.x') {
            source 'underscore*'
        }

        'bootstrap'('3.3.x') {
            source 'dist/js/bootstrap*' >> 'js/'
            source 'dist/css/*' >> 'css/'
            source 'dist/fonts/**' >> 'fonts/'
        }

        'basscss'('7.1.x')

        'toastr'('2.x.x') {
            source 'toastr*'
        }

        'html.sortable'('0.3.x')

        'backbone'('1.2.x') {
            source 'backbone*'
        }

        'marionette'('2.4.x') {
            source 'lib/backbone.marionette*'
        }

        'backbone.radio'('1.0.2') {
            source 'build/*'
        }

        'backbone.stickit'('0.9.2') {
            source 'backbone.stickit.js'
        }

        'backbone-nested-models'('blittle/backbone-nested-models#v2.0.x') {
            source 'backbone-nested-models*'
        }

        'backbone-validation'('0.11.x') {
            source 'dist/*'
        }

        'requirejs'() {
            source 'require.js'
        }

        'requirejs-text'()

        'select2'('4.x') {
            source 'dist/js/*' >> 'js/'
            source 'dist/css/*' >> 'css/'
        }

        'select2-bootstrap-theme'('0.1.0-beta.4') {
            source 'dist/*'
        }

        'bootstrap-datepicker'('1.6.x') {
            source 'dist/js/*' >> 'js/'
            source 'dist/css/*' >> 'css/'
            source 'dist/locales/*' >> 'locales/'
        }

        'fullcalendar'('2.7.1') {
            source 'dist/*'
        }

        'gridstack'('0.2.x') {
            source 'dist/*'

            excludes 'lodash'
        }
    }

    additional = [
            name: 'ConfLab'
    ]
}

project.ext {
    jasmineDependencies = ['karma-junit-reporter']
}

task setupTestDependencies(type: NpmTask) {
    outputs.dir file('node_modules')
    args = ['install']
    jasmineDependencies.each {
        args.add("$it")
    }
}

karma {
    colors = true
    browsers = ['PhantomJS']
    frameworks = ['jasmine']
    reporters = ['junit']
    junitReporter = [outputDir     : 'build/test-results',
                     useBrowserName: true]
    plugins = [
            'karma-jasmine',
            'karma-junit-reporter',
            'karma-phantomjs-launcher',
    ]

    files = [
            'src/test/js/**.*js'
    ]
}

assemble.dependsOn(bowerRefresh)
karmaRun.dependsOn(setupTestDependencies)